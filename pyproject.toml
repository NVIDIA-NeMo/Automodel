# Copyright (c) 2025, NVIDIA CORPORATION.  All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages.find]
include = ["nemo_automodel", "nemo_automodel.*"]

[project]
description = "NeMo Automodel - Delivers zero-day integration with Hugging Face models automating fine-tuning and pretraining with built-in parallelism, custom-kernels and optimized recipes"
name = "nemo-automodel"
dynamic = ["version"]
readme = "README.md"
authors = [{ name = "NVIDIA", email = "nemo-toolkit@nvidia.com" }]
maintainers = [{ name = "NVIDIA", email = "nemo-toolkit@nvidia.com" }]
requires-python = ">=3.10"
classifiers = [
    # How mature is this project? Common values are
    #  1 - Planning
    #  2 - Pre-Alpha
    #  3 - Alpha
    #  4 - Beta
    #  5 - Production/Stable
    #  6 - Mature
    #  7 - Inactive
    'Development Status :: 4 - Beta',
    # Indicate who your project is intended for
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Intended Audience :: Information Technology',
    # Indicate what your project relates to
    'Topic :: Scientific/Engineering',
    'Topic :: Scientific/Engineering :: Mathematics',
    'Topic :: Scientific/Engineering :: Image Recognition',
    'Topic :: Scientific/Engineering :: Artificial Intelligence',
    'Topic :: Software Development :: Libraries',
    'Topic :: Software Development :: Libraries :: Python Modules',
    'Topic :: Utilities',
    # Pick your license as you wish (should match "license" above)
    'License :: OSI Approved :: Apache Software License',
    # Supported python versions
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    # Additional Setting
    'Environment :: Console',
    'Natural Language :: English',
    'Operating System :: OS Independent',
]
dependencies = [
    "bitsandbytes==0.45.5; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
    "cut-cross-entropy @ git+https://github.com/apple/ml-cross-entropy.git@87a86ab",
    "datasets",
    "liger-kernel==0.5.8; (platform_machine == 'x86_64' and platform_system != 'Darwin')",
    "pyyaml",
    "torch",
    "torchdata",
    "transformers",
    "wandb",

]
[project.optional-dependencies]
vlm = ["qwen-vl-utils[decord]"]
[project.urls]
Homepage = "https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/"
Repository = "https://github.com/NVIDIA/NeMo-Automodel"
Download = "https://github.com/NVIDIA/NeMo-Automodel/releases"

[dependency-groups]
docs = [
    "sphinx",
    "sphinx-autobuild",    # For live doc serving while editing docs
    "sphinx-autodoc2",     # For documenting Python API
    "sphinx-copybutton",   # Adds a copy button for code blocks
    "myst_parser",         # For our markdown docs
    "nvidia-sphinx-theme", # Our NVIDIA theme
]
build = []
test = ["coverage", "pytest"]
nvfsdp = ["nvfsdp"]

[tool.uv]
default-groups = ["docs", "test", "nvfsdp"]

[tool.uv.sources]
nvfsdp = { git = "https://github.com/NVIDIA-NeMo/nvFSDP.git", rev = "e48b3c622040b05a5ab4b27eb68a2ec598a985a3" }

[tool.coverage.paths]
source = [".", "/workspace", "/home/runner/work/NeMo-Automodel/NeMo-Automodel"]

[tool.coverage.run]
omit = [
    "nemo_automodel/checkpoint/_backports/*.py",
]

[tool.ruff]

# Match black's line length
line-length = 120
target-version = "py310"

# Exclude common directories that shouldn't be linted
exclude = [
    ".git",
    ".github",
    ".venv",
    "venv",
    "__pycache__",
    "*.egg",
    "build",
    "dist",
    "docs/source/conf.py",
    "setup.py",
]

# Files to completely ignore
extend-exclude = ["*.ipynb"]

[tool.ruff.lint]
# Configure imports sorting to match isort
select = [
    "F541", # f-string without any placeholders
    "F841", # local variable assigned but never used
    "F401", # imported but unused
    "E741", # ambiguous variable name
    "F821", # undefined name
    "E266", # too many leading '#' for block comment
    "I",    # isort
    "D101", # docstring
    "D212", # first doc-string line is empty
    "D",
]

# Additional rules can be added here
ignore = [
    "D100", # Missing docstring in public module
    "D200", # one line doc-string shoudl fit in one line
    "D212", # doc-string starts with empty line
    "E501", # Line too long - handled by formatter
]
[tool.ruff.lint.isort]
known-first-party = ["nvfsdp"]
known-third-party = ["examples", "scripts"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
lines-after-imports = 2

[tool.ruff.lint.per-file-ignores]
# Ignore import violations in __init__ files
"__init__.py" = ["F401", "F403", "D104"]
# Ignore docstring requirements in test files
"test_*.py" = ["D101", "D103"]
"*_test.py" = ["D101", "D103"]
"tests/*.py" = ["D101", "D103"]
"nemo_automodel/checkpoint/_backports/*.py" = [
    "D101",
    "D103",
    "D205",
    "D417",
    "D415",
]

[tool.ruff.format]
# Match black configuration
quote-style = "double"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"
