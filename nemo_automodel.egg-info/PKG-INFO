Metadata-Version: 2.4
Name: nemo-automodel
Version: 0.2.0rc0
Summary: NeMo Automodel - Provides Day-0 support for any Hugging Face model leveraging PyTorch native functionalities while providing performance and memory optimized training and inference recipes.
Author-email: NVIDIA <nemo-toolkit@nvidia.com>
Maintainer-email: NVIDIA <nemo-toolkit@nvidia.com>
Project-URL: Homepage, https://docs.nvidia.com/deeplearning/nemo/user-guide/docs/en/stable/
Project-URL: Repository, https://github.com/NVIDIA/NeMo-Automodel
Project-URL: Download, https://github.com/NVIDIA/NeMo-Automodel/releases
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: Intended Audience :: Information Technology
Classifier: Topic :: Scientific/Engineering
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Utilities
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Environment :: Console
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: bitsandbytes==0.45.5; platform_machine == "x86_64" and platform_system != "Darwin"
Requires-Dist: datasets>=4.0.0
Requires-Dist: liger-kernel==0.5.8; platform_machine == "x86_64" and platform_system != "Darwin"
Requires-Dist: pyyaml
Requires-Dist: torch
Requires-Dist: torchdata
Requires-Dist: transformers
Requires-Dist: wandb
Requires-Dist: torchao
Provides-Extra: vlm
Requires-Dist: pillow; extra == "vlm"
Requires-Dist: qwen-vl-utils[decord]; extra == "vlm"
Requires-Dist: transformers==4.53.0; extra == "vlm"
Requires-Dist: timm==1.0.16; extra == "vlm"
Requires-Dist: backoff; extra == "vlm"
Requires-Dist: numpy; extra == "vlm"
Requires-Dist: numba; extra == "vlm"
Requires-Dist: torchcodec; extra == "vlm"
Provides-Extra: fa
Requires-Dist: flash-attn; extra == "fa"
Dynamic: license-file

# NVIDIA Documentation Starter Kit

A comprehensive Sphinx documentation template with advanced features for technical documentation, including AI-powered search, multi-environment builds, and custom extensions.

## Features

### ðŸš€ Advanced Sphinx Extensions
- **Content Gating**: Conditional content rendering based on release stages (GA, EA, Internal, Draft)
- **JSON Output**: Automatic generation of search-optimized JSON indexes alongside HTML
- **AI Assistant**: AI-powered search responses using Pinecone vector database integration
- **Enhanced Search**: Advanced search capabilities with intelligent result processing
- **MyST Codeblock Substitutions**: Dynamic code block content replacement

### ðŸŽ¯ Multi-Environment Support
- **GA (General Availability)**: Production-ready documentation
- **EA (Early Access)**: Preview features and beta content
- **Internal**: Internal-only documentation with full access
- **Draft**: Work-in-progress content and experimental features

### ðŸ“Š AI-Powered Documentation
- **Vector Database Integration**: Pinecone integration for semantic search
- **RAG Chatbot**: Ready-to-use retrieval-augmented generation chatbot
- **Automated Indexing**: Scripts for uploading documentation to vector databases
- **Smart Search Responses**: Context-aware AI responses to user queries

## Quick Start

### Prerequisites

- Python 3.8+
- [uv](https://docs.astral.sh/uv/) package manager (recommended) or pip

### Setup

1. **Clone and set up the environment:**
   ```bash
   git clone <your-repo>
   cd docs-example-project-setup
   make docs-env
   ```

2. **Start development server:**
   ```bash
   make docs-live-ga
   ```

   Documentation will be available at `http://localhost:8000` with live reload.

## Build System

### Environment-Specific Builds

```bash
# Production build (GA)
make docs-html-ga
make docs-publish-ga          # With strict warnings

# Early access features
make docs-html-ea
make docs-live-ea

# Internal documentation
make docs-html-internal
make docs-live-internal

# Draft/experimental content
make docs-html-draft
make docs-live-draft
```

### Generic Build Commands

```bash
# Build with custom environment
make docs-html DOCS_ENV=custom-tag
make docs-live DOCS_ENV=custom-tag

# Clean builds
make docs-clean
```

## AI-Powered Search Integration

### Pinecone Setup

1. **Test your Pinecone connection:**
   ```bash
   make docs-pinecone-test
   ```

2. **Upload documentation (dry run first):**
   ```bash
   make docs-pinecone-upload-dry
   make docs-pinecone-upload
   ```

3. **Build and update search index:**
   ```bash
   make docs-pinecone-update
   ```

### RAG Chatbot

The `scripts/` directory includes ready-to-use chatbot implementations:

- `rag/rag_chatbot.py` - Command-line RAG chatbot
- `rag/rag_web_server.py` - Web-based chatbot server
- `rag/query_pinecone_example.py` - Example query implementation

## Custom Extensions

### Content Gating Extension

Control document visibility based on build environment:

```yaml
---
# Document frontmatter
only: not ga  # Exclude from GA builds
---
```

```rst
::::{toctree}
:only: internal
:caption: Internal Only

internal-guide.md
secret-features.md
::::
```

### JSON Output Extension

Automatically generates search-optimized JSON alongside HTML:

```python
# conf.py
json_output_settings = {
    'enabled': True,
    'extract_code_blocks': True,
    'extract_keywords': True,
    'filter_search_clutter': True,
}
```

### AI Assistant Extension

Provides intelligent search responses:

```python
# conf.py
ai_assistant_enabled = True
ai_assistant_endpoint = "your-pinecone-assistant-endpoint"
ai_assistant_api_key = "your-api-key"
ai_trigger_threshold = 2  # Trigger AI when < 2 search results
```

## Project Structure

```
docs-example-project-setup/
â”œâ”€â”€ docs/
â”‚   â”œâ”€â”€ _extensions/           # Custom Sphinx extensions
â”‚   â”‚   â”œâ”€â”€ content_gating/    # Multi-environment content control
â”‚   â”‚   â”œâ”€â”€ json_output/       # Search index generation
â”‚   â”‚   â”œâ”€â”€ ai_assistant/      # AI-powered search responses
â”‚   â”‚   â””â”€â”€ search_assets/     # Enhanced search functionality
â”‚   â”œâ”€â”€ about/                 # About section
â”‚   â”œâ”€â”€ admin/                 # Administrator guides
â”‚   â”œâ”€â”€ feature-set-a/         # Feature documentation
â”‚   â”œâ”€â”€ feature-set-b/         # Additional features
â”‚   â”œâ”€â”€ get-started/           # Getting started guides
â”‚   â”œâ”€â”€ reference/             # API reference
â”‚   â””â”€â”€ conf.py               # Sphinx configuration
â”œâ”€â”€ scripts/                  # Utility scripts
â”‚   â””â”€â”€ rag/                  # RAG implementation
â”‚       â”œâ”€â”€ rag_chatbot.py        # Command-line chatbot
â”‚       â”œâ”€â”€ rag_web_server.py     # Web chatbot server
â”‚       â”œâ”€â”€ send_to_pinecone_simple.py  # Vector DB upload
â”‚       â”œâ”€â”€ test_pinecone_setup.py      # Connection testing
â”‚       â”œâ”€â”€ query_pinecone_example.py   # Example queries
â”‚       â”œâ”€â”€ rag_chatbot_all-in-one.py  # Simple demo
â”‚       â””â”€â”€ requirements.txt         # RAG dependencies
â”œâ”€â”€ Makefile                  # Build automation
â””â”€â”€ requirements-docs.txt     # Python dependencies
```

## Content Organization

### Multi-Level Content Gating

- **Document Level**: Use frontmatter `only: condition`
- **Toctree Level**: Conditional navigation trees
- **Directive Level**: Conditional grid cards and components

### Environment Tags

- `ga` - General Availability (production)
- `ea` - Early Access (limited preview)
- `internal` - Internal use only
- `draft` - Work in progress

### Example Usage

```rst
:::{grid-item-card} Beta Feature
:only: ea

This feature is only available in Early Access builds.
:::

::::{toctree}
:only: not ga
:caption: Internal Documentation

internal/security-guide.md
internal/architecture.md
::::
```

## Configuration

### Core Dependencies

The template includes carefully selected dependencies:

- **Sphinx** - Documentation generator
- **MyST Parser** - Markdown support with extended syntax
- **nvidia-sphinx-theme** - NVIDIA-branded theme
- **sphinx-design** - Modern UI components
- **sphinx-autobuild** - Live reload development
- **sphinxcontrib-mermaid** - Diagram support
- **swagger-plugin-for-sphinx** - API documentation

### AI & Search Dependencies

- **pinecone** - Vector database client
- **openai** - OpenAI API integration
- **python-dotenv** - Environment variable management

### Environment Variables

Create a `.env` file for AI features:

```bash
PINECONE_API_KEY=your-pinecone-key
PINECONE_ENVIRONMENT=your-environment
PINECONE_INDEX_NAME=your-index
OPENAI_API_KEY=your-openai-key
```

## Customization

### Adapting for Your Project

1. **Update project metadata:**
   - Edit `docs/conf.py` project information
   - Update `docs/project.json`
   - Customize `myst_substitutions` in conf.py

2. **Modify documentation structure:**
   - Replace example content in `docs/`
   - Update navigation in index files
   - Customize content gating rules

3. **Configure AI features:**
   - Set up Pinecone account and index
   - Configure API endpoints in conf.py
   - Customize AI response templates

4. **Brand customization:**
   - Update theme settings in conf.py
   - Customize CSS in extensions
   - Replace logos and assets

## Advanced Features

### Automated Content Processing

- **Keyword Extraction**: Automatic technical keyword identification
- **Link Analysis**: Internal/external link tracking
- **Code Block Processing**: Language-aware code extraction
- **Hierarchical Navigation**: Automatic section path generation

### Performance Optimizations

- **Parallel Processing**: Multi-core build acceleration
- **Incremental Builds**: Only process changed files
- **Content Caching**: Intelligent caching for AI responses
- **Memory Management**: Configurable memory limits

### Integration Ready

- **CI/CD Support**: GitLab/GitHub Actions compatible
- **Search Integration**: Lunr.js, Solr, Elasticsearch ready
- **API Generation**: Swagger/OpenAPI documentation
- **Analytics**: Usage tracking and statistics

## Contributing

1. Fork the repository
2. Create a feature branch
3. Test your changes with `make docs-live-draft`
4. Submit a pull request

## Troubleshooting

### Common Issues

1. **Build Failures**: Use `make docs-publish-ga` for detailed warnings
2. **Environment Issues**: Reinstall with `make docs-env`
3. **AI Features Not Working**: Check `.env` configuration and test with `make docs-pinecone-test`
4. **Cache Issues**: Clear with `make docs-clean`

### Getting Help

- Check extension README files in `docs/_extensions/`
- Review example configurations in `conf.py`
- Test individual components with provided scripts
- Consult the [Sphinx documentation](https://www.sphinx-doc.org/)

## License

Licensed under the Apache License, Version 2.0. See the project files for details. 
